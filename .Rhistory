coord_trans(y = "sqrt")
ggplot(data = pf, aes(x=age, y= friend_count)) +
geom_point(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(data = pf, aes(x=age, y= friend_count)) +
geom_point(alpha = 1/20, position_jitter(h=0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(data = pf, aes(x=age, y= friend_count)) +
geom_point(alpha = 1/20) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(data = pf, aes(x=age, y= friend_count)) +
geom_point(alpha = 1/20,position = position_jitter(h=0)) +
xlim(13,90) +
coord_trans(y = "sqrt")
ggplot(aes(x= age, y = frindships_initiated), data = pf) +
geom_plot()
ggplot(aes(x= age, y = frindships_initiated), data = pf) +
geom_point()
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_point()
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_point()+
xlim(13,90)
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_jitter(alpha = 1/20)+
xlim(13,90)
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_jitter(alpha = 1/20)+
xlim(13,90)
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_jitter(alpha = 1/20, position = 'jitter')+
xlim(13,90)
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_jitter(alpha = 1/20, position = 'jitter')+
xlim(13,90) +
coord_trans(y='sqrt')
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_jitter(alpha = 1/20, position = 'jitter')+
xlim(13,90) +
coord_trans(y='sqrt')
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_points(alpha = 1/20, position = position_jitter(h=0))+
xlim(13,90) +
coord_trans(y='sqrt')
ggplot(aes(x= age, y = friendships_initiated), data = pf) +
geom_point(alpha = 1/20, position = position_jitter(h=0))+
xlim(13,90) +
coord_trans(y='sqrt')
library('dplyr')
?group_by
pf.fc_by_age < - group_by(pf, friend_count, age)
pf.fc_by_age <- group_by(pf, friend_count, age)
?summarise()
?summarise
pf.fc_by_age <- summarise(pf.fc_by_age,age,
mean_fc_age = mean(friend_count),
median_fc_age = median(friend_count),
n = n())
pf.fc_by_age <- group_by(pf, friend_count, age)
pf.fc_by_age <- summarise(pf.fc_by_age,age,
mean_fc_age = mean(friend_count),
median_fc_age = median(friend_count),
n = n())
pf.fc_by_age <- group_by(pf, age)
pf.fc_by_age <- group_by(pf, age)
?group_by
by_cyl <- group_by(mtcars, cyl)
summarise(by_cyl, mean(disp), mean(hp))
mtcars
summary(mtcars)
length(mtcars)
mtcars
dim(mtcars)
summarise(by_cyl, mean(disp), mean(hp))
pf.fc_by_age <- group_by(pf, age)
pf.fc_by_age <- summarise(pf.fc_by_age,age,
mean(friend_count))
names(pf.fc_by_age)
pf.fc_by_age <- summarise(pf.fc_by_age,
mean(friend_count))
head(pf.fc_by_age)
pf.fc_by_age <- summarise(pf.fc_by_age,
mean_fc =mean(friend_count),
median_fc =median(friend_count),
n = n())
pf.fc_by_age <- summarise(pf.fc_by_age,
mean_fc = mean(friend_count),
median_fc = median(friend_count),
n = n())
names(pf.fc_by_age)
pf.fc_by_age <- group_by(pf, age)
pf.fc_by_age <- summarise(pf.fc_by_age,
mean_fc = mean(friend_count),
median_fc = median(friend_count),
n = n())
head(pf.fc_by_age)
?arrange
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
tail(pf.fc_by_age)
ggplot(aes(x=age, y=mean_fc),data = pf.fc_by_age) +
geom_line()
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0)) +
color = 'orange'
coord_cartesian(y = 'sqrt')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0)) +
color = 'orange'+
coord_cartesian(y = 'sqrt')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90)
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0))
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0)) +
color = 'orange'
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0)),
color = 'orange')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_cartesian(y = 'sqrt')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'red')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean, color='blue')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean,
color='blue') +
geom_line(stat = 'summary', fun.y = median,
color='green')
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean,
color='blue') +
geom_line(stat = 'summary', fun.y = median,
color='green') +
geom_line(stat = 'summary', fun.y = quantile, prob     = 0.9, color='red', linetype =2) +
geom_line(stat = 'summary', fun.y = quantile, prob     = 0.1, color='magenta', linetype =2)
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean,
color='blue') +
geom_line(stat = 'summary', fun.y = median,
color='green') +
geom_line(stat = 'summary', fun.y = quantile, probs     = 0.9, color='red', linetype =2) +
geom_line(stat = 'summary', fun.y = quantile, probs     = 0.1, color='magenta', linetype =2)
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean,
color='blue') +
geom_line(stat = 'summary', fun.y = median,
color='green') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs = .9), color='red',
linetype =2) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs = .9), color='magenta', linetype =2)
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean,
color='blue') +
geom_line(stat = 'summary', fun.y = median,
color='green') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs = .9), color='red',
linetype =2) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs = .1), color='magenta', linetype =2)
?coord_cartesian
ggplot(aes(x=age, y=friend_count),data = pf) +
xlim(13,90) +
geom_point(alpha =1/20, position =
position_jitter(h=0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean,
color='blue') +
geom_line(stat = 'summary', fun.y = median,
color='green') +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs = .9), color='red',
linetype =2) +
geom_line(stat = 'summary', fun.y = quantile,
fun.args = list(probs = .1), color='magenta', linetype =2) +
coord_cartesian(xlim = c(13,90), ylim = c(0,1000))
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
?cor
cor(pf$age,pf$friend_count)
cor(pf$friend_count,pf$age)
round(-0.02740737, 3)
targetDBP <- 70
μ <- 80
σ <- 10
percentage <- pnorm(targetDBP, mean = μ, sd = σ)
round(percentage)*100
percentage <- pnorm(targetDBP, mean = μ, sd = σ)
round(percentage,2)*100
round(percentage,1)*100
round(percentage,2)*100
targetquantile <- 0.95
μ <- 1
σ <- 75
quantile_brain <- qnorm(targetquantile, mean = μ, sd = σ) # Probablity quantile
round(quantile_brain,2)*100
targetquantile <- 0.95
μ <- 1,100
σ <- 75
targetquantile <- 0.95
μ <- 1100
σ <- 75
quantile_brain <- qnorm(targetquantile, mean = μ, sd = σ)
round(quantile_brain,2)*100
round(quantile_brain,2)
round(quantile_brain,0)
targetBV <- 0.95
μ <- 1100
σ <- 75
SE <- σ/sqrt(100)
quantile_targetBV <- qnorm(targetBV, mean = μ, sd = SE)
round(qquantile_targetBV,2)*100
round(quantile_targetBV,2)*100
round(quantile_targetBV,2)
probpercent <- pbinom(3, size=5, prob=0.5, lower.tail = FALSE)
round(probpercent,2)*100
μ <- 15
σ <- 10
n <- 100
SE <- σ/sqrt(n)
left <- 14
right <- 16
percentageLeft <- pnorm(left, mean = μ, sd = SE) * 100
percentageRight <- pnorm(right, mean = μ, sd = SE) * 100
probPercentage <- round(percentageRight - percentageLeft)
probPercentage
qquantile < -qnorm(0.5, mean = 0.5, sd = (1/12)/sqrt(1000))
qquantile <-qnorm(0.5, mean = 0.5, sd = (1/12)/sqrt(1000))
qquantile
probability <- round(ppois(quantile, lambda = t * λ), digits=2)
t <- 3
λ <- 5
quantile <- 10
probability <- round(ppois(quantile, lambda = t * λ), digits=2)
ppois(10, 3*5)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
coefTable <- coef(summary(fit))
coefTable <- coef(summary(fit))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
coefTable
summary(fit)$sigma
(sigma <- sqrt(sum(e ^ 2) / (n - 2)))
library(swirl)
swirl()
1/6
a<-c(1,2,3,4,5,6)
3.5
expect_dice()
expect_dice
dice_high
expect_dice
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh + edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
smeans
mean(smeans)
pmf
expect_dice()
expect_dice
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
plot(cars)
data_sample <- rexp(40, 0.2)
head(data_sample)
tail(data_sample)
summary(data_sample)
set.seed(31)
# Set Lamba to 0.2
lambda <- 0.2
# Set sample size n =40
n <- 40
data_sample <- rexp(n,lambda)# Exponential Distribution Parameter
# Let's simulate the above for 1000 Times
simulations <- 1000
simulated_exponentials <- replicate(simulations, rexp(n, lambda))
head(data_sample)
tail(data_sample)
summary(data_sample)
simulated_data <- replicate(simulations, rexp(n, lambda))
means_simulated_data <- apply(simulated_data, 2, mean)
summary(means_simulated_data)
theory_mean <- 1/lambda
analytical_mean <- mean(means_simulated_data)
theory_mean
analytical_mean
```
hist(means_simulated_data, xlab = "mean", main = "Simulations of Exponential function in R")
abline(v = analytical_mean, col = "red")
abline(v = theory_mean, col = "orange")
hist(means_simulated_data, xlab = "mean", main = "Simulations of Exponential function in R")
abline(v = analytical_mean, col = "red")
abline(v = theory_mean, col = "blue")
# standard deviation of distribution
standard_deviation_dist <- sd(means_simulated_data)
standard_deviation_dist
# standard deviation from analytical expression
standard_deviation_theory <- (1/lambda)/sqrt(n)
standard_deviation_theory
# variance of distribution
variance_dist <- standard_deviation_dist^2
variance_dist
# variance from analytical expression
variance_theory <- ((1/lambda)*(1/sqrt(n)))^2
variance_theory
lines(xfit, yfit, pch=22, col="black", lty=5)
xfit <- seq(min(means_simulated_data), max(means_simulated_data), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_exponentials,breaks=n,prob=T,col="magenta",xlab = "means",main="Density of means",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=5)
xfit <- seq(min(means_simulated_data), max(means_simulated_data), length=100)
yfit <- dnorm(xfit, mean=1/lambda, sd=(1/lambda/sqrt(n)))
hist(means_simulated_data,breaks=n,prob=T,col="magenta",xlab = "means",main="Density of means",ylab="density")
lines(xfit, yfit, pch=22, col="black", lty=5)
```
qqnorm(means_exponentials)
qqline(means_exponentials, col = 2)
qqnorm(means_simulated_data)
qqline(means_simulated_data, col = 2)
simulated_data <- replicate(simulations, rexp(n, lambda))
simulated_data
head(simulated_data)
summary(means_simulated_data)
library(datasets)
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == .5, ])
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 1, ])
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 2, ])
library(ggplot2)
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose)))
print(g)
avg <- aggregate(len~.,data=ToothGrowth,mean)
g <- ggplot(aes(x=dose, y = len), data = ToothGrowth) +
geom_point(aes(color = supp))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
print(g)
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose)))
geom_boxplot(aes(fill = supp))
ggplot(aes(x = factor(dose), y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = factor(dose)))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
t.test(len ~ supp, paired = F, var.equal = F, data = ToothGrowth)
library(swirl)
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$newHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
install.packages("RODBC")
library(RODBC)
channel<- odbcConnect("Shr4_vrt_pro_007", uid="21970579", pwd="Udacity-16 ", believeNRows=FALSE)
channel<- odbcConnect("Vertica_new_18_node", uid="21970579", pwd="Udacity-16 ", believeNRows=FALSE)
channel<- odbcConnect("shr4_vrt_pro_007", uid="21970579", pwd="Udacity-16", believeNRows=FALSE)
channal <- odbcConnect("Shr4_vrt_pro_007", uid="21970579", pwd="Udacity-16", believeNRows=FALSE)
channal <- odbcConnect("Vertica_new_18_node", uid="21970579", pwd="Udacity-16", believeNRows=FALSE)
df_discounts_usage <- sqlQuery(channal, "
SELECT *
FROM
App_BM_Telemetry_Print_Usage_Ink_Interim_Anonymous.promotions_calendar_mar_04")
View(df_discounts_usage)
df_discounts_history <- sqlQuery(channal, "
SELECT *
FROM
App_BM_Telemetry_Print_Usage_Ink_Interim_Anonymous.promotions_calendar_mar_04")
head(df_discounts_history)
df_discounts_history <- sqlQuery(channal, "
SELECT *
FROM
App_BM_Telemetry_Print_Usage_Ink_Interim_Anonymous.promotions_discount_mar_04")
df_discounts_history <- sqlQuery(channal, "
SELECT *
FROM
App_BM_Telemetry_Print_Usage_Ink_Interim_Anonymous.promotions_calendar_mar_04")
df_promotional_discounts_history <- sqlQuery(channal, "
SELECT *
FROM
App_BM_Telemetry_Print_Usage_Ink_Interim_Anonymous.promotions_discount_mar_04")
View(df_discounts_usage)
ls()
rm(df_discounts_usage)
save.image("~/Projects/PPS-BIF/Promotions/Big Data Project from MATT/R_Plots/R session.RData")
ls(channel)# list objects
ls(channel)
df_ojp_weekly_promo_usage_mar_16 <- sqlQuery(channal, "
SELECT *
FROM
App_BM_Telemetry_Print_Usage_Ink_Interim_Anonymous.TEMP_OJP_WEEKLY_PROMO_USAGE_MAR_16")
View(df_ojp_weekly_promo_usage_mar_16)
Summary(df_ojp_weekly_promo_usage_mar_16)
summary(df_ojp_weekly_promo_usage_mar_16)
library(rCharts)
head(df_ojp_weekly_promo_usage_mar_16)
ojp_discounting_chart_FARAD<- subset(as.data.frame(df_ojp_weekly_promo_usage_mar_16), PR_NAME == "FARAD BASE")
rm(ojp_discounting_chart_FARAD)# remove objects
View(df_ojp_weekly_promo_usage_mar_16)
ojp_discounting_chart_STAPLES<- subset(as.data.frame(df_ojp_weekly_promo_usage_mar_16), ACCOUNT == "STAPLES")
n1 <- nPlot( PR_NAME ~ TOTAL_PAGES, group = "DISCOUNT_LEVEL", data = ojp_discounting_chart_STAPLES , type = "multiBarChart")
n1$print("chart3")
install.packages("bitops")
library(bitops)
library(RCurl)
setwd("C:/Users/somannam/Documents/Personal files/Personal files/PMP/DATA Science- Journey/R/Data Science-Coursera/Developing Data Products/Shiny Project/Slidify/myapp_BMI")
